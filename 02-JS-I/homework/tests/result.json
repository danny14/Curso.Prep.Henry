{"numFailedTestSuites":1,"numFailedTests":3,"numPassedTestSuites":0,"numPassedTests":24,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":1,"numTotalTests":27,"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeys":[],"unmatched":0,"updated":0},"startTime":1604956147316,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["nuevaString"],"failureMessages":[],"fullName":"nuevaString Deberia ser un string","location":null,"status":"passed","title":"Deberia ser un string"},{"ancestorTitles":["nuevoNum"],"failureMessages":[],"fullName":"nuevoNum Deberia ser un numero","location":null,"status":"passed","title":"Deberia ser un numero"},{"ancestorTitles":["nuevoBool"],"failureMessages":[],"fullName":"nuevoBool Deberia ser un booleano","location":null,"status":"passed","title":"Deberia ser un booleano"},{"ancestorTitles":["nuevaResta"],"failureMessages":[],"fullName":"nuevaResta Deberia ser un booleano","location":null,"status":"passed","title":"Deberia ser un booleano"},{"ancestorTitles":["nuevaMultiplicacion"],"failureMessages":[],"fullName":"nuevaMultiplicacion Deberia ser un booleano","location":null,"status":"passed","title":"Deberia ser un booleano"},{"ancestorTitles":["nuevoModulo"],"failureMessages":[],"fullName":"nuevoModulo Deberia ser un booleano","location":null,"status":"passed","title":"Deberia ser un booleano"},{"ancestorTitles":["devolverString(str)"],"failureMessages":[],"fullName":"devolverString(str) Deberia devolver el string provisto","location":null,"status":"passed","title":"Deberia devolver el string provisto"},{"ancestorTitles":["suma(x, y)"],"failureMessages":[],"fullName":"suma(x, y) Deberia devolver la suma de los dos argumentos","location":null,"status":"passed","title":"Deberia devolver la suma de los dos argumentos"},{"ancestorTitles":["resta(x, y)"],"failureMessages":[],"fullName":"resta(x, y) Deberia devolver la diferencia de los dos argumentos","location":null,"status":"passed","title":"Deberia devolver la diferencia de los dos argumentos"},{"ancestorTitles":["divide(x, y)"],"failureMessages":[],"fullName":"divide(x, y) Deberia devolver la division de los dos argumentos","location":null,"status":"passed","title":"Deberia devolver la division de los dos argumentos"},{"ancestorTitles":["multiplica(x, y)"],"failureMessages":[],"fullName":"multiplica(x, y) Deberia devolver el producto de los dos argumentos","location":null,"status":"passed","title":"Deberia devolver el producto de los dos argumentos"},{"ancestorTitles":["sonIguales(x, y)"],"failureMessages":[],"fullName":"sonIguales(x, y) Deberia devolver true si los argumentos son iguales y sino false","location":null,"status":"passed","title":"Deberia devolver true si los argumentos son iguales y sino false"},{"ancestorTitles":["tienenMismaLongitud(str1, str2)"],"failureMessages":[],"fullName":"tienenMismaLongitud(str1, str2) Deberia devolver true si los strings tienen la misma longitud y sino false","location":null,"status":"passed","title":"Deberia devolver true si los strings tienen la misma longitud y sino false"},{"ancestorTitles":["menosQueNoventa(num)"],"failureMessages":[],"fullName":"menosQueNoventa(num) Deberia devolver true si el numero es menor a noventa sino false","location":null,"status":"passed","title":"Deberia devolver true si el numero es menor a noventa sino false"},{"ancestorTitles":["mayorQueCincuenta(num)"],"failureMessages":[],"fullName":"mayorQueCincuenta(num) Deberia devolver true si el numero es mayor a cincuenta sino false","location":null,"status":"passed","title":"Deberia devolver true si el numero es mayor a cincuenta sino false"},{"ancestorTitles":["obtenerResto(x, y)"],"failureMessages":[],"fullName":"obtenerResto(x, y) Deberia devolver el resto de dividir x sobre y","location":null,"status":"passed","title":"Deberia devolver el resto de dividir x sobre y"},{"ancestorTitles":["esPar(num)"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected value to be:\n  true\nReceived:\n  undefined\n\nDifference:\n\n  Comparing two different types of values. Expected boolean but received undefined.\n    at Object.<anonymous> (/home/k4z3d4/Escritorio/Curso.Prep.Henry/02-JS-I/homework/tests/JSI.test.js:149:22)\n    at Object.asyncFn (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/jasmine_async.js:82:37)\n    at resolve (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:52:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:39:19)\n    at promise.then (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:73:82)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"esPar(num) Deberia devolver true si el numero es par sino false","location":null,"status":"failed","title":"Deberia devolver true si el numero es par sino false"},{"ancestorTitles":["esImpar(num)"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected value to be:\n  false\nReceived:\n  undefined\n\nDifference:\n\n  Comparing two different types of values. Expected boolean but received undefined.\n    at Object.<anonymous> (/home/k4z3d4/Escritorio/Curso.Prep.Henry/02-JS-I/homework/tests/JSI.test.js:157:24)\n    at Object.asyncFn (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/jasmine_async.js:82:37)\n    at resolve (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:52:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:39:19)\n    at promise.then (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:73:82)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"esImpar(num) Deberia devolver true si el numero es impar sino false","location":null,"status":"failed","title":"Deberia devolver true si el numero es impar sino false"},{"ancestorTitles":["elevarAlCuadrado(num)"],"failureMessages":[],"fullName":"elevarAlCuadrado(num) Deberia devolver el numero elevado al cuadrado","location":null,"status":"passed","title":"Deberia devolver el numero elevado al cuadrado"},{"ancestorTitles":["elevarAlCubo(num)"],"failureMessages":[],"fullName":"elevarAlCubo(num) Deberia devolver el numero elevado al cubo","location":null,"status":"passed","title":"Deberia devolver el numero elevado al cubo"},{"ancestorTitles":["elevar(num, exponent)"],"failureMessages":[],"fullName":"elevar(num, exponent) Deberia devolver el numero elevado al exponente indicado","location":null,"status":"passed","title":"Deberia devolver el numero elevado al exponente indicado"},{"ancestorTitles":["redondearNumero(num)"],"failureMessages":[],"fullName":"redondearNumero(num) Deberia devolver el numero redondeado","location":null,"status":"passed","title":"Deberia devolver el numero redondeado"},{"ancestorTitles":["redondearHaciaArriba(num)"],"failureMessages":[],"fullName":"redondearHaciaArriba(num) Deberia devolver el numero redondeado para arriba","location":null,"status":"passed","title":"Deberia devolver el numero redondeado para arriba"},{"ancestorTitles":["agregarSimboloExclamacion(str)"],"failureMessages":[],"fullName":"agregarSimboloExclamacion(str) Deberia agregar un signo de exclamacion al final del string","location":null,"status":"passed","title":"Deberia agregar un signo de exclamacion al final del string"},{"ancestorTitles":["combinarNombres(firstName, lastName)"],"failureMessages":[],"fullName":"combinarNombres(firstName, lastName) Deberia devolver los strings combinados con un espacio en el medio","location":null,"status":"passed","title":"Deberia devolver los strings combinados con un espacio en el medio"},{"ancestorTitles":["obtenerSaludo(name)"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected value to be:\n  \"Hola Martin!\"\nReceived:\n  \"Hola Martin\"\n    at Object.<anonymous> (/home/k4z3d4/Escritorio/Curso.Prep.Henry/02-JS-I/homework/tests/JSI.test.js:221:37)\n    at Object.asyncFn (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/jasmine_async.js:82:37)\n    at resolve (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:52:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:39:19)\n    at promise.then (/home/k4z3d4/Escritorio/Curso.Prep.Henry/node_modules/jest-jasmine2/build/queue_runner.js:73:82)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"obtenerSaludo(name) Deberia devolver el string 'Hola {name}!'","location":null,"status":"failed","title":"Deberia devolver el string 'Hola {name}!'"},{"ancestorTitles":["obtenerAreaRectangulo(alto, ancho)"],"failureMessages":[],"fullName":"obtenerAreaRectangulo(alto, ancho) Deberia retornar el area correcta del rectangulo","location":null,"status":"passed","title":"Deberia retornar el area correcta del rectangulo"}],"endTime":1604956149312,"message":"  ● esPar(num) › Deberia devolver true si el numero es par sino false\n\n    expect(received).toBe(expected) // Object.is equality\n    \n    Expected value to be:\n      true\n    Received:\n      undefined\n    \n    Difference:\n    \n      Comparing two different types of values. Expected boolean but received undefined.\n\n      147 | describe('esPar(num)', function() {\n      148 |   it('Deberia devolver true si el numero es par sino false', function() {\n    > 149 |     expect(esPar(6)).toBe(true);\n      150 |     expect(esPar(7)).toBe(false);\n      151 |     expect(esPar(0)).toBe(true);\n      152 |   });\n      \n      at Object.<anonymous> (02-JS-I/homework/tests/JSI.test.js:149:22)\n\n  ● esImpar(num) › Deberia devolver true si el numero es impar sino false\n\n    expect(received).toBe(expected) // Object.is equality\n    \n    Expected value to be:\n      false\n    Received:\n      undefined\n    \n    Difference:\n    \n      Comparing two different types of values. Expected boolean but received undefined.\n\n      155 | describe('esImpar(num)', function() {\n      156 |   it('Deberia devolver true si el numero es impar sino false', function() {\n    > 157 |     expect(esImpar(6)).toBe(false);\n      158 |     expect(esImpar(7)).toBe(true);\n      159 |     expect(esImpar(0)).toBe(false);\n      160 |   });\n      \n      at Object.<anonymous> (02-JS-I/homework/tests/JSI.test.js:157:24)\n\n  ● obtenerSaludo(name) › Deberia devolver el string 'Hola {name}!'\n\n    expect(received).toBe(expected) // Object.is equality\n    \n    Expected value to be:\n      \"Hola Martin!\"\n    Received:\n      \"Hola Martin\"\n\n      219 | describe('obtenerSaludo(name)', function() {\n      220 |   it('Deberia devolver el string \\'Hola {name}!\\'', function() {\n    > 221 |     expect(obtenerSaludo('Martin')).toBe('Hola Martin!');\n      222 |     expect(obtenerSaludo('Antonio')).toBe('Hola Antonio!');\n      223 |   });\n      224 | });\n      \n      at Object.<anonymous> (02-JS-I/homework/tests/JSI.test.js:221:37)\n","name":"/home/k4z3d4/Escritorio/Curso.Prep.Henry/02-JS-I/homework/tests/JSI.test.js","startTime":1604956148151,"status":"failed","summary":""}],"wasInterrupted":false}